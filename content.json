{"meta":{"title":"masterx0的个人博客","subtitle":"诛仙","description":"张小凡的blog","author":"Allen Master","url":"https://masterx0.github.io/blog","root":"/blog/"},"pages":[{"title":"关于","date":"2019-10-20T11:10:26.853Z","updated":"2019-10-20T11:10:26.853Z","comments":false,"path":"about/index.html","permalink":"https://masterx0.github.io/blog/about/index.html","excerpt":"","text":"一个工作在南京建邺区阿里中心的低端码农，惶惶不可终日"},{"title":"书单","date":"2019-10-20T11:10:26.853Z","updated":"2019-10-20T11:10:26.853Z","comments":false,"path":"books/index.html","permalink":"https://masterx0.github.io/blog/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-10-20T11:10:26.853Z","updated":"2019-10-20T11:10:26.853Z","comments":false,"path":"categories/index.html","permalink":"https://masterx0.github.io/blog/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-10-20T11:10:26.853Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"links/index.html","permalink":"https://masterx0.github.io/blog/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-10-20T11:10:26.853Z","updated":"2019-10-20T11:10:26.853Z","comments":false,"path":"repository/index.html","permalink":"https://masterx0.github.io/blog/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-10-20T11:10:26.853Z","updated":"2019-10-20T11:10:26.853Z","comments":false,"path":"tags/index.html","permalink":"https://masterx0.github.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":":2019-:04-:03-:april","slug":"2019-04-03-april","date":"2019-04-08T01:32:02.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/08/2019-04-03-april/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/08/2019-04-03-april/","excerpt":"","text":"未来规划上周四与@niwei和@ymx就南京分公司未来发展做了交流，目前是两种解决方案，一种是留在南京公司工作但是未来不做任何保障，随时可能失业；另一种是进入阿里base杭州但是难度较大，比较不现实。自己思量了目前的状况，在手头有深圳中厂保底offer的前提下，应该自己继续找工作，而不是随遇而安在舒适圈里打发时间搬砖。在互联网大厂基本没有hc的情况下再想进去很难，转变方向目标瞄准初创企业小厂，范围南京、杭州和上海。简历投递记录A2-9-107alibaba(HZ)bytedance(NJ) 4.14面试","categories":[{"name":"alicloud","slug":"alicloud","permalink":"https://masterx0.github.io/blog/categories/alicloud/"}],"tags":[{"name":"月度会议总结","slug":"月度会议总结","permalink":"https://masterx0.github.io/blog/tags/月度会议总结/"}]},{"title":"库存中心学习笔记.md","slug":"库存中心学习笔记","date":"2019-04-03T06:31:47.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/03/库存中心学习笔记/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/03/库存中心学习笔记/","excerpt":"","text":"基础架构设计WHC仓库中心&amp;IPM库存中心库存相关可售库存(sellable quantity) = 真实库存(real quantity) + 在途库存(preorder quantity) - 锁定库存(withhold quantity) - 占用库存(occupy quantity) - 安全库存(safe_quantity 后续会变更)库存管理关键功能有库存锁定(PreOrder)、占用、确认和取消，库存查询以及库存调整。标准流程是：锁定-&gt;占用-&gt;确认-&gt;扣减，取消在锁定和占用时都可以调用库存查询分为：单个sku某个仓库库存查询、单个sku所有仓库总量查询、仓库所有sku分页查询库存调整分为：创建或增量修改库存、创建或覆盖修改库存。两者流程区别在于插入数据库时前者使用单线程insert、后者使用多线程insert数据库设计库存相关表：inventory、inventory_event、inventory_log其中event表：安全库存调整、物理库存调整、PO调整、锁定/占用/取消/扣减；log表：在发生上面的事件后，记录下来当时更多的信息，比如仓库信息等渠道库存相关表：channel、channel_inventory、channel_entity、channel_inventory_log仓库相关表：warehouse、warehouse_rule、warehouse_scope在阅读项目wiki时备注不使用悲观锁，采用乐观锁（版本号判断）应该是由于库存相关业务查多改少的缘故。缓存设置寻源时设置地址到编码映射缓存，key为warehouseScope中的四级地址，value为对应的warehouseCodes拿到warehouseCodes后，要找到对应的warehouse，此处设置一个缓存，key为 warehouseCode，vaule为warehouse寻源的时候，会有对应商品的skuId，以商品的skuId和对应warehouseCode，warehouseType 作为key，inventory 作为value寻源的时候，还需要找出对应skuId 最大可买数量，对这部分数据也做缓存，key 为skuId， value 为数量在Read相关操作时设置缓存、在Write相关操作时删除缓存渠道库存相关渠道库存主要有两种应用场景，其一是库存第三方渠道管理(如京东、苏宁易购、自营电商等)，另一是商家或平台营销活动管理(限购、秒杀、预售等)运营端：库存管理员可以创建渠道、变更渠道库存、查询渠道库存等；商家端：交易相关库存锁定、库存占用、库存扣减等。主要接口如下：1234567891011121314151617createChannelInventory：创建渠道库存。平台设定渠道可售卖库存或商家参加平台活动，传入渠道信息以及库存信息创建渠道库存，不需要对渠道库存进行库存可用数量校验(渠道不是实时生效，存在先创建渠道库存后入库的场景)。batchCreateChannelInventory：批量创建渠道库存。场景同 创建渠道库存。batchCreateChannelInventoryWithChannel：创建渠道并批量创建渠道库存。商家创建活动并发布后，传入活动渠道信息以及库存信息创建渠道库存，不需要校验可用库存数。incChannelInventory：增量调整渠道库存。对应渠道商品入库或增量划分库存给指定渠道时，传入渠道信息以及库存信息在原有渠道库存基础上增量调整渠道库存数量。setChannelInventory：全量覆盖渠道库存。重新设定渠道库存数量时，传入渠道信息以及库存信息直接覆盖原有渠道库存数量。releaseChannelInventory：释放渠道库存。对应sku退出渠道销售或商家sku退出平台活动时，传入渠道信息以及sku信息释放对应渠道库存，释放后，已经产生的订单操作导致的库存操作正常进行，下单时该sku禁止通过该渠道下单。batchReleaseChannelInventories：批量释放渠道库存。场景同 释放渠道库存。releaseByChannel：释放对应渠道下所有的渠道库存。当渠道失效时，传入渠道信息，批量释放该渠道下所有渠道库存。queryChannelInventory：查询sku的渠道库存。传入sku信息(支持指定渠道，需传入渠道信息)查询渠道库存数据。queryAllSkuInventory：查询渠道下所有的渠道库存。传入渠道编码，获取该渠道下所有的渠道库存。findNeedInvalidChannel：获取已经失效但是有部分渠道库存未释放的渠道。提供给任务中心调用，用于补偿任务，补偿释放需要释放的渠道库存。findNeedExpiredChannelByDateTime：获取需要失效的渠道数据。提供给任务中心调用，用户自动释放过期渠道。channelInventoryPagination：渠道库存分页，分页展示渠道库存，支持渠道编码以及sku唯一标识（skuId或skuCode）查询。queryChannelInventory：根据渠道信息、sku信息、仓库信息查询渠道库存。海信接口，库存中心后续迭代支持。queryActivityChannelInventory：根据渠道信息以及sku信息查询生效的渠道库存。海信接口。queryChannelInventoryWithWarehouse：根据渠道信息、sku信息、仓库信息、状态（选填）查询渠道库存。海信接口，已存在类似能力接口，后续迭代合并。queryChannelInventoryList：根据sku信息、仓库信息、状态（选填）查询渠道库存。海信接口，已存在类似能力接口，后续迭代合并。PS:其中需要注意创建渠道当传入渠道sid时要做幂等性处理，未传入则不需要；同时对创建但未使用的渠道建立定时cron任务清除;渠道库存创建时，不对库存数据进行操作，仅仅只是在库存的基础上增加了一级渠道库存;存在独占渠道库存时，在创建其他渠道库存时获取剩余可用库存，需要扣除独占部分的库存;寻源【重要】核心逻辑如下：参数校验-&gt;加载寻源规则-&gt;组装组合商品-&gt;核心寻源模型运算-&gt;针对不同业务合并仓库-&gt; 过滤择优仓库寻源是库存中心最为重要的一部分，需要梳理寻源代码结构、主要执行流程、对应的派单规则和拆单规则寻源模块具体细节仓库模型菜鸟库存模型从仓库内的一二三级帐和whc的库存帐转变为以基础网络库存，逻辑库存，物理库存为核心的三层库存体系 临保库存、批次库存在Marathon迭代一种做了，热点库存、预设库存等目前在调研阶段尚未落地库存流水主要由report_inventory_log表内容体现，通过定时任务定期汇总周期内平均库存、日均销售成本、库存周转天数，提供分页查询接口供指标数据查询管控中心数据流如下所示：监控来源:外部将相关数据传入管控中心，由管控中心根据特定规则对这些业务数据进行分析，得出是否存在问题，传入渠道包括如下：提供基础的DUBBO服务，对外暴露接收需要监控的业务数据提供MQ异步消息通信，目前支持RocketMQ和ONS，各自提供对应的topic和tag，最终结果还是调用上面提供的DUBBO接口以使用MQ接受topic为例，通过MQDataSourceReceiver接受数据，使用MonitorBizDataWriteFacde.initMonitorData()初始化管控数据，再通过ActionChain.new flowControl()新建处理流，通过一系列例如ValidateAction、ConvertAction、DataDBAction处理后返回MonitorResult","categories":[],"tags":[]},{"title":"仓储配送领域知识总结.md","slug":"仓储配送领域知识总结","date":"2019-04-03T06:31:47.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/03/仓储配送领域知识总结/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/03/仓储配送领域知识总结/","excerpt":"","text":"仓储库存作为全渠道零售的底层核心支撑业务，服务于整个交易链路，承担十分重要的作用。在学习公司已有parana_inventory以及集团内部包含盒马、菜鸟、物流宝等产品的系统框架基础知识后，对库存业务有了些许认识，现在记录如下以便纠错备忘和供团队分享时所用。1.parana_inventory目前内容理解截止v5.0.18.1.RELEASE版本_，_目前公司内部库存中心主要实现了IPM基础功能，分为仓库、库存和渠道三个模块，其中仓库模块内由于和WMS关系密切，目前仅提供包含覆盖范围设置在内的仓库基础信息维护功能；库存模块内面向交易链路包含库存占用、锁定、取消、扣减、查询和调整在内的库存基础操作较为成熟，库存流水(帐)、在途库存、批次库存和库存同步等功能有待改进；渠道模块拟形成独占渠道、互斥渠道、活动渠道和共享渠道在内的模型。2.众配宝背景解决最后一公里问题，定位服务于B2C业务模式，重点聚焦末端的降本提效，提升配送服务品质和小件员管理能力业务设计主要涵盖从站点接单到货、领货扫描、小件员领货根据情况完成包裹配送/拒收/滞留等派件业务、退货出站、中转出站。借鉴意义由于东购在配送环节需要cover支付业务，这块有待商榷参考资料菜鸟众配宝操作指南.pdf3.物流宝背景物流宝业务2011年年初，阿里的物流信息管理系统“物流宝”正式推出。“物流宝”本质上也是一个物流信息调配平台，阿里将第三方快递、仓储的信息接入进来，面向淘宝卖家提供入库、发货、上门揽件等服务。“物流宝”的关键在于通过数据化分析追踪各地物流资源使用情况，减少货物在各地间的流转以达到降低成本和提高效率的目的，用于沟通买家、卖家和第三方供应商实现买家优质物流服务体验、卖家多样化物流解决方案和3PL高效物流协同的平台物流宝与菜鸟仓储区别物流宝核心在于物流仓储资源的数据化分析和管理能力，调配第三方物流资源，建立服务平台、履约平台、跟踪平台、仓储平台和配送平台形成服务网络和运营网络，在集团内部物流宝又称“天网”。菜鸟仓储网络核心主要在于建设仓储设施网络，通过社会化协同的方式形成一张覆盖全国的仓配智能骨干网，主要由快递网络、仓配网络和末端网络(例如菜鸟驿站)组成，在集团内部菜鸟网络又称“地网”。物流宝API接入物流宝提供的API经过整理主要可以分为面向商品、订单、库存和其他相关这几类，调用方式是通过http接口post方式https://open.taobao.com/api.htm?docId=10597&amp;docType=2接口名接口简介接口描述商品taobao.wlb.item.get根据商品ID获取商品信息根据商品ID获取商品信息,除了获取商品信息外还可获取商品属性信息和库存信息taobao.wlb.item.map.get根据商品ID查询商品映射关系根据物流宝商品ID查询商品映射关系taobao.wlb.item.combination.get根据商品id查询商品组合关系taobao.wlb.item.update修改物流宝商品信息taobao.wlb.item.add添加单个物流宝商品taobao.wlb.item.query分页查询商品根据状态、卖家、SKU等信息查询商品列表taobao.wlb.item.batch.query批次库存查询接口根据用户id，item id list和store code来查询商品库存信息和批次信息订单taobao.wlb.order.page.get分页查询物流宝订单taobao.wlb.wlborder.get根据物流宝订单编号查询物流宝订单概要信息taobao.wlb.order.consign订单已发货通知接口当物流宝订单已发货的时候，erp需要调用该接口来通知物流订单和淘宝交易订单已发货taobao.wlb.order.create创建物流宝订单创建物流宝订单，由外部ISV或者ERP，Elink，淘宝交易产生taobao.wlb.order.cancel取消物流宝订单taobao.wlb.orderdetail.date.get按照日期范围查询物流订单详情外部ERP可通过该接口查询一段时间内的物流宝订单，以及订单详情taobao.wlb.orderstatus.get物流宝订单流转状态查询根据物流宝订单号查询物流宝订单至目前为止的流转状态列表taobao.wlb.tradeorder.get根据交易号获取物流宝订单根据交易类型和交易id查询物流宝订单详情taobao.wlb.tmsorder.query通过物流订单编号查询物流信息通过物流订单编号分页查询物流信息库存taobao.wlb.inventory.detail.get查询库存详情taobao.inventory.ipc.inventorydetail.get库存明细查询taobao.wlb.inventorylog.query根据商品ID查询所有库存变更记录通过商品ID等几个条件来分页查询库存变更记录cainiao.merchant.inventory.adjust商家库存调整商家仓库存调整接口，目前仅支持全量更新taobao.wlb.wms.inventory.lack.upload缺货通知taobao.wlb.wms.inventory.count损益单回传taobao.wlb.out.inventory.change.notify外部库存变化通知拥有自有仓的企业物流用户通过该接口把自有仓的库存通知到物流宝，由物流宝维护该库存，控制前台显示库存的准确性其他taobao.wlb.notify.message.confirm通知消息确认确认物流宝可执行消息taobao.wlb.notify.message.page.get通知消息查询接口物流宝提供的消息通知查询接口，消息内容包括;出入库单不一致消息，取消订单成功消息，盘点单消息taobao.uop.tob.order.createToB仓储发货taobao.wlb.subscription.query查询商家定购的所有服务查询商家定购的所有服务,可通过入参状态来筛选业务设计目前理解是物流宝向下对接WMS、TMS等实操系统，向上对接B端运营管理平台和商家1.下图描述的是物流宝基于仓储、配送和服务能力的能力网络及其之上的服务网络和运营网络2.下图描述的是物流宝在能力、服务和运营网络之上建立服务平台、履行平台和跟踪平台；之下提供仓储平台和配送平台借鉴意义物流宝可以借鉴点在我看来是其服务于卖家、买家和第三方供应商的仓储、配送等资源协同平台，团队建设库存中心可以借鉴其对接WMS、TMS的仓储服务和配送服务建设上，例如：增强实物库存相关功能，为对接仓储管理和库存中心做准备配送支持对接小件、大件、生鲜等包裹配送模式，商品运输支持大家电、小家电、商超等种类参考资料物流宝平台介绍.pptx、https://yuque.antfin-inc.com/inventorydistribution/mdp/bpgvgr4.智分宝背景智分宝起初主要是应用于中小件分拨中心的系统，随着业务发展，目前已经支持跨境出口业务、零售通业务、大件家装业务等。智分宝系统主要操作流程包括了：揽收、收货、集包、发货、交接等，操作流程如下图：主体业务环节收货类型分为运单收货和批量收货，其中批量收货指按集包维度收货，不用进行后续的分拣集包步骤，直接根据配置路由运转和调拨集包是将若干个包裹以一定的维度集合在特定的容器内，并赋予一定的业务含义交接是指包裹货物在集包后不需要再进行发货装车，下一步直接到仓库或者到配送站平台化发展历史业务设计智分宝核心逻辑包含作业实操数据运营**两部分，边缘功能包含基础资料管理、用户设置和运输管理等分拨中心作业实操功能，包括分拨运单，作业管理，列表管理，异常管理，交接单管理、打印管理和分拨管理等模块分拨运单包括包括分拨运单、分拨拦截、高级查询等功能作业管理包括包括分拨收货、装车发货、分拨称重、称重记录等模块列表管理包括包括集包列表、交接单列表等模块异常管理包括异常登记、分拨换配等模块交接管理包括交接单管理打印管理包括集包批次打印、集包码补打、批次码补打、路由打印、面单打印等功能分拨管理包括包括分拨流向方案、分拨流向配置等模块分拨中心数据运营，包括各类数据报表，包括实时作业报表、统计作业报表、KPI考核报表、仓库生产情况、超时挂单数、分拨操作核对、人工分拣报表、分拨计划大盘、分拨大盘等模块正向操作针对运单收货(公共分拨)的场景针对批量收货(CP分拨)的场景逆向操作针对配送时拒收的场景针对退货时拦截登记的场景借鉴意义在分拨中心落地建设中，在设计分拣、集单模块时可以参考智分宝的设计思路，以及对正向和逆向操作流程的标准化，比较难的一块看下来应该是分拨规则计算(确定哪些货送上哪辆车)，要尽量装满车并且不会滞留过久。参考资料：https://yuque.antfin-inc.com/cnlst/lstwl/bae34ghttps://yuque.antfin-inc.com/zfbplatformproject5.运保宝#","categories":[],"tags":[]},{"title":":2019-:04-:03-:march","slug":"2019-04-03-march","date":"2019-04-03T06:31:47.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/03/2019-04-03-march/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/03/2019-04-03-march/","excerpt":"","text":"3.1会议@zhenqing表示东购项目是未来南京研发中心的主要方向lazada供应链和仓储配送内容3.4会议@niwei强调业务理解与技术成长一样重要sourcing逻辑梳理3.5会议指出接下来两到三周内要多阅读理解关于仓储配送、履约跟踪的内容物流的细分环节(从下单购买到收货之间发生了什么)3.6会议@yumin分享了配送中心业务相关调研成果东购仓配分为上海主仓、北京和武汉分仓；配送分为正常配送、直配送、供应商配送和调拨配送@niwei着重强调物流的业务理解重要性(配送平台)，解释物流宝定位3.8会议对菜鸟仓配做了分享仓储+配送是重点Tips阿里技术分级P5 开发工程师P6 高级开发工程师P7 技术专家P8 高级专家P9 资深技术专家","categories":[{"name":"alicloud","slug":"alicloud","permalink":"https://masterx0.github.io/blog/categories/alicloud/"}],"tags":[{"name":"月度会议总结","slug":"月度会议总结","permalink":"https://masterx0.github.io/blog/tags/月度会议总结/"}]},{"title":"ActionChain定义笔记.md","slug":"ActionChain定义笔记","date":"2019-04-03T06:31:47.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/03/ActionChain定义笔记/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/03/ActionChain定义笔记/","excerpt":"","text":"Action贯穿在库存交易操作，提供链式操作方便迭代扩展，将流程从代码实现逻辑中抽出提炼为标准，使用时通过指定action及顺序实现相关业务123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class ActionChain&lt;T extends ActionContext&gt; implements Appendable&lt;T&gt; &#123; //存储具体操作链表 private final List&lt;IAction&lt;T&gt;&gt; chain = new ArrayList&lt;&gt;(); //存储拦截器链表 private final List&lt;IInterceptor&lt;T&gt;&gt; interceptors = new ArrayList&lt;&gt;(); //添加具体操作 @Override public Appendable&lt;T&gt; appendAction(Class&lt;? extends IAction&lt;T&gt;&gt; action) &#123; chain.add(ActionBeanFactory.getActionInstance(action)); return this; &#125; //添加拦截器 @Override public Appendable&lt;T&gt; appendInterceptor(IInterceptor&lt;T&gt; interceptor) &#123; interceptors.add(interceptor); return this; &#125; //执行逻辑 public ActionResult execute(T context) &#123; IAction&lt;T&gt; currentAction = null; ActionResult actionResult = ActionResult.success(); while (!context.isIgnored() &amp;&amp; !context.isIdempotent() &amp;&amp; actionResult.isSuccess() &amp;&amp; (currentAction = nextAction(currentAction)) != null) &#123; try &#123; intercept(context, currentAction, actionResult, Stage.BEFORE, null); currentAction.execute(context); intercept(context, currentAction, actionResult, Stage.AFTER, null); &#125; catch (Exception ex) &#123; intercept(context, currentAction, actionResult, Stage.EXCEPTION, ex); &#125; finally &#123; intercept(context, currentAction, actionResult, Stage.FINAL, null); &#125; &#125; actionResult.forwardContextStatus(context.isIgnored(), context.isIdempotent()); return actionResult; &#125; private void intercept(T param, IAction&lt;T&gt; handler, ActionResult result, Stage loc, Throwable ex) &#123;&#125; public enum Stage &#123; BEFORE, AFTER, FINAL, EXCEPTION &#125;&#125;在使用时主要通过实现IAction接口中execute()方法的action实现类、实现IInterceptor接口中beforeHandle()、afterHandle()、errorHandle()和finalHandle()方法的interceptor实现类和继承ActionContext的具体场景上下文完成逻辑编写实现","categories":[],"tags":[]},{"title":"Dice使用笔记.md","slug":"Dice使用笔记","date":"2019-04-03T06:31:47.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/03/Dice使用笔记/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/03/Dice使用笔记/","excerpt":"","text":"将本地代码依照git-flow格式要求推送到dice的gittar仓库中在分析项目栏点击新建分支选择要打包的分支，点击提交后开始进入项目打包阶段，完成代码获取、打包类型识别、编译代码、制作 Docker 镜像几个步骤等待过程中可以点击项目动态查看部署状态实现功能小结：源码自动编译打包，添加dockerfile生成docker image上传至平台的repository打包成功后，通过集群管理平台进行服务部署成功部署后界面如下图所示，实现了CI/CD基本要求","categories":[],"tags":[]},{"title":"WorkFlow定义笔记.md","slug":"WorkFlow定义笔记","date":"2019-04-03T06:31:47.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/03/WorkFlow定义笔记/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/03/WorkFlow定义笔记/","excerpt":"","text":"工作流workfow定义节点node定义StartNode 起始节点TaskNode 任务节点ForkNode 分支节点JoinNode 合并节点EndNode 结束节点控制方法定义start 初始化workflownext 添加任务decision 判断逻辑fork 分支or 或join 合并end 结束workflowworkflow 基本常识fork后必须有唯一的join与其对应fork和join应该提供多线程支持提高执行效率ForkNode记录各分支NodeJoinNode记录被合并的各分支Nodefork()或decision()后不可以立刻跟join(),需要有至少一个or()","categories":[],"tags":[]},{"title":"库存寻源业务逻辑梳理.md","slug":"Sourcing寻源模块业务逻辑整理","date":"2019-04-03T06:31:47.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/03/Sourcing寻源模块业务逻辑整理/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/03/Sourcing寻源模块业务逻辑整理/","excerpt":"","text":"寻源业务场景商品详情页查看当前区域商品可售数量直降活动库存大于实际可售库存，详情页查询要以实际可售库存为准直降活动库存小于实际可售库存，详情页查询要以直降活动库存为准区域限购无可售库存商品购物车在商品已经加入购物车后，由于库存数量改变导致不满足购物车条件要提示库存不足在商品加入购物车后，切换配送地址要及时反馈不可售情况单sku下单预售活动库存小于仓库实际库存，按照仓库优先级扣减库存，在单sku下单数量高于实际库存时提示无法购买但仓库数量不满足下单sku数量时拆单规则要符合仓库优先级设置一个商家多个sku下单普通场景下尽量在仓库优先级设置下要以同一仓库发货为准组合商品数量在任何仓库都不满足同一仓库出库的前提下提示不可售买赠场景买商品A赠商品B在寻源时配置优先级买A赠C &amp; 买B赠A默认遵循赠品优先于主商品的逻辑寻源核心逻辑v5.0.18.1.RELEASE寻源基于工作流的方式进行sourcing prehandler: 寻源参数预处理，主要分为以下四个步骤io.terminus.parana.inventory.server.sourcing.prehandle.support.DivisionValidator 实现仓库配送范围参数校验，针对不配送区域直接返回io.terminus.parana.inventory.server.sourcing.prehandle.support.SourcingRuleLoad 主要是寻源规则的加载并处理，如配置是否必须同仓出货等io.terminus.parana.inventory.server.sourcing.prehandle.support.SourcingQuantityPreHandler 控制NPE，将寻源的商品数量&lt;=0的设置为1io.terminus.parana.inventory.server.sourcing.prehandle.support.WarehousePrehandler 仓库相关预处理，剔除不符合要求的一部分assemble bucket：组装组合商品，进行商品及数量的合并, 默认提供io.terminus.parana.inventory.server.sourcing.bucket.support.DefaultBucketAssemble支持相关逻辑，内部经由group()、combineSameSku()和handleOutingRule()处理后将SourcingBuckets存入payload中bucket sourcing：寻源的主要逻辑bucket initial process: 初步过滤，默认提供BucketWarehouseHandler中处理针对入参的仓库集和寻源规则，区域限售针对仓库的过滤等data load：寻源的数据加载，加载Inventory-&gt;加载渠道库存-&gt;处理仓库维度独占问题-&gt;加载warehousewarehouse filter：二次仓库过滤，合并仓库，去掉warehouse中的inventorycheck quantity: 计算最大可贩卖库存，默认提供DefaultCheckQuantity实现主要逻辑satisfied warehouse selector: 针对库存不满足需求的仓库进行过滤，默认提供DefaultWarehouseSelector和EntityQuantityWarehouseSelector实现主要逻辑bucket special process: 出库特殊处理，对于不能被workflow接下来逻辑影响的策略要提前进行处理，针对海信的有货即发，必须同仓以上两个寻源规则，海信不需要考虑最小拆仓原则，优先在bucket处理掉combine warehouse: 针对不同的业务合并仓库,默认提供io.terminus.parana.inventory.server.sourcing.combination.support.DefaultWarehouseReCombination支持相关逻辑，将满足条件的仓库合并成CombinedWarehouseExt列表存储在payload中sort warehouse: 过滤仓库，默认提供DefaultWarehouseSort内部通过Comparator的选择实现主要逻辑MatchedComparator：根据仓库命中数排序，命中数越高排名越前IndexComparator：根据仓库index排序，index值越小排名越前QuantityComparator：根据仓库可卖sku数量排序，数量越多排名越前choose best warehouse：选择最优仓库，默认提供DefaultWarehouseChoose实现主要逻辑上述所有操作都是可配置化的，在业务层面建立SourcingConfig注入到Spring中，利用策略模式选择合适的处理策略，配合责任链模式和命令模式实现具体功能。寻源多线程相关1.多线程执行parallelExecution用于经过preHandler和AssembleBucket处理之后的核心部分bucketSourcing中2.接口定义如下：123public interface ParallelExecution &#123; void start(ParallelExecutionAction action, ParallelExecutionContext context, Collection&lt;? extends ParallelExecutionParam&gt; collection);&#125;内部通过使用CountDownLatch实现多线程并发，实际调用：1234public interface ParallelServiceTemplate&lt;T&gt; &#123; Response&lt;T&gt; executeParallel(ParallelServiceCallback&lt;T&gt; callback);&#125;在ParallelServiceTemplateImpl中调用定义的注解@ParallelExecute标注的ParallelAction.executeAction()在切面ParallelExecuteUtility执行实际多线程业务1234567891011121314@Around(value = \"@annotation(parallelExecute)\") public void execute(ProceedingJoinPoint joinPoint, ParallelExecute parallelExecute) &#123; ... threadPoolExecutor.execute(() -&gt; &#123; try &#123; joinPoint.proceed(parameters); &#125; catch (Throwable throwable) &#123; callback.setEx(throwable); &#125; finally &#123; callback.getCountDownLatch().countDown(); &#125; &#125;); ...&#125;寻源服务接口io.terminus.parana.inventory.server.sourcing.InventorySourcingService//首先在阅读源码过程中，该接口实现类有几点我觉得是在技术实现上是可以改进的 //1.下面的代码中SourcingResultExecutor在逻辑中单独注入运行，为什么不添加到WorkflowBuilder //后放入Workflow中执行，单独提出来的原因在源码中没看出来，觉得可能是原始代码是不同人接手完成的 try { log.info(\"sourcing begin ,param:{}\", JSON.toJSON(sourcingParam)); WorkFlow&lt;InventorySourcingByDimension, Payload&gt; workFlow = workflowBuilder.build(sourcingParam); payload = createPayLoad(sourcingParam, tenantId); payload.setWorkFlow(workFlow); workFlow.exec(sourcingParam, payload); } catch (SourcingException e) { log.error(\"inventory.sourcing.fail\", e); } catch (Exception e) { log.error(\"inventory.sourcing.fail\", e); } sourcingResultExecutor.execute(sourcingParam, payload); InventorySourcingByDimension sourcingResult = payload.getSourcingResult(); //2.捕捉异常SourcingException和Exception报错信息相同的话合并下是不是更好 //3.寻源service没有使用接口定义，直接在service类中写了Implement实现逻辑 工作流中主要参数InventorySourcingByDimension、InventoryBucket和PayloadInventorySourcingByDimension 被库存服务接口唯一参数inventorySourcing内数组包装，包含寻源dto列表sourcingInventories、维度dimensionId、维度类型dimensionType、区域divisionIds、仓库信息warehouses、寻源选项sourcingOption等字段Payload 包含业务id、工作流workflow、InventorySourcingByDimension、bucketList、寻源各个节点配置sourcingConfig、排序过的寻源规则优先级sortedSourcingRules、寻源返回值sourcingResult等字段InventoryBucket 库存捆绑信息是寻源的基础，来源于Payload中的bucketList计算赋值的寻源库存集合内，包含仓库库存是否满足satisfied、满足数量要求的仓库列表warehouseResult、该bucket使用的寻源规则列表sourcingRules、出库规则outingRule等字段工作流实现类和寻源工作流实现类DefaultWorkflowBuilder&amp;DefaultSourcingDefaultWorkflowBuilder定义了PreSourcingHandleExecutor-&gt;BucketAssembleExecutor-&gt;SourcingExecutor-&gt;WarehouseCombinationExecutor-&gt;WarehouseSortExecutor-&gt;WarehouseChooseExecutor工作流程DefaultSourcing则将SourcingExecutor细分为BucketBeforeHandlerExecutor-&gt;DataloadExecutor-&gt;DefaultWarehouseFilterExecutor-&gt;DefaultCheckQuantityExecutor-&gt;WarehouseSelectExecutor-&gt;BucketAfterHandlerExecutor工作流程寻源执行实现类io.terminus.parana.inventory.server.sourcing.AbstractSourcingExecutor实现了Executor接口的execute()方法，内部通过Payload.getSourcingConfig().getActionConfig()获取负载参数集中Action枚举值与寻源扩展处理类的映射关系，再迭代执行定义的抽象方doExecute(bean,param,payload)实现主要逻辑。定义了protected ListextendClass(Payload payload）获取extend扩展类列表义了protected ListextendClassName(Payload payload）获取extend扩展类名称定义了抽象方法protected abstract void doExecute(T bean,P param,Payload payload）供实现类编写执行逻辑定义了抽象方法protected abstract SourcingConfig.ActionEnum action(）获取Action枚举值定义了抽象方法public abstract ClassExtendClass(）与Action枚举值对应的Action接口","categories":[],"tags":[]},{"title":"库存中心术语表.md","slug":"库存中心术语表","date":"2019-04-03T06:31:47.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/03/库存中心术语表/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/03/库存中心术语表/","excerpt":"","text":"1.仓库名词解释)2.基础业务名词)3.菜鸟常用业务术语)4.GIS(Global inventory Service)5.SCM(Supply Chain Management)6.PO(purchase order)7.CP(Content Provider)8.BMS计费管理系统9.TOM(Total Order Management)10.LGMS是Lazada端的物流管理系统，提供一系列HTTP接口供菜鸟端调用，如仓储单状态有更新时，WHC需要调用LGMS接口来通知状态的更新11.统一建模语言（UML）用例图","categories":[],"tags":[]},{"title":"库存中心项目测试笔记.md","slug":"库存中心项目测试笔记","date":"2019-04-03T06:31:47.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/03/库存中心项目测试笔记/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/03/库存中心项目测试笔记/","excerpt":"","text":"inventory-server测试部分前提概要测试部分分开使用了TestNG和Junit测试框架，并且在Junit测试框架部分由于迭代开发由不同人员接手，导致包测试结构混乱，测试相同功能可能有多个测试类，后面的接手人员需要加以甄别已经将不再使用的测试类使用@Deprecated注解标注，后面的接手人员可以忽略这些测试类带来的干扰单元测试在sponge迭代中明确规定要达到工程行覆盖率80%的要求inventory-server测试TestNG部分原理该部分使用io.terminus.parana.Generator通过相关配置自动生成测试目录结构，相关实现逻辑见测试自动化插件目前这部分读取resources下的json资源文件作为请求参数，执行自动生成的dubbo接口测试类寻源InventorySourcingService单元测试备忘目前寻源部分单测行覆盖率由64%提高到84%，但执行inventory包下所有测试寻源部分并达不到80%原因待查;server下的sourcing模块重构自manager.component下的sourcing模块寻源sourcingConfig加载要求tenantId必须存在且目前代码逻辑必须等于默认值1寻源工作流使用了workflow包下定义的工作操作流，没有使用sourcing包下定义的SourcingActionChain定义的工作链当前寻源测试覆盖了大多数业务场景，但代码中预置相关数据部分，只能使用注释中标出要插入的sql语句，无法在before中构造使用，原因是多线程寻源时不能提取事务中未提交的数据beforeHandle包内的BucketWarehouseHandler对应的executor枚举值为bucketPreHandlerafterHandler包内的DefaultBucketAfterHandler针对海信的两条寻源规则单测没有覆盖到，需要开启XhsdBucketAssemblepreHandle内的WarehousePreHandler目前配置中未使用，需要构造新的SourcingConfig插入执行selector内的EntityQuantityWarehouseSelector目前由于IndexWarehouse中的index为null部分逻辑单测覆盖不到","categories":[],"tags":[]},{"title":"批次库存&临保库存.md","slug":"批次库存&临保库存","date":"2019-04-03T06:31:47.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/03/批次库存&临保库存/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/03/批次库存&临保库存/","excerpt":"","text":"批次管理的主要用途是支持库存管理，方法是模拟商品的实物发生过程，给予出入库的记录，从而能够准确地进行库存的统计和管控。在批次上，要能够识别该批次商品的进货时间、进货单单据号、供应商、进价等项目，这样就可以在后期查询库存时，明确商品的具体来源。在批次上，要能够识别该批次商品的包装信息，包括包装规格、包装条形码等项目，这样在后期入库上架、出库等业务处理时，根据包装规格来进行计算。在批次上，对于管理保质期的商品，要能够识别该批次商品的生产日期信息，包括生产日期、到期日期等项目，这样就可以在收货、配送出库、销售出库等业务处理时，自动判断商品保质期和保鲜期，并执行先进先出了。根据以上对批次的可识别项目的要求，在定义一个批次时，一般商品要根据商品的进货单、进价、生产日期、包装规格等项目来进行区分，只要其中一个项目不同，就识别为不同的批次；对于特殊商品，则要根据特殊项目，如批号、序列号等，进一步区分批次。临保库存是指接近保质期的库存。不同的商品临保时间定义不一样。通过定义商品临保规则，计算临保商品是否进入临保时间段，同时提供报表能力。","categories":[],"tags":[]},{"title":"新零售库存模型笔记.md","slug":"新零售库存模型笔记","date":"2019-04-03T06:31:47.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/03/新零售库存模型笔记/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/03/新零售库存模型笔记/","excerpt":"","text":"盒马新零售库存模型(一盘货)将库存分为四类，分别是面向C端消费者的销售库存GSI、面向B端业务层的业务库存GBI、面向财务管理的财务库存GAI和面向采购供应链的实物库存GPI。门店库存和仓库库存在2019.02.18阶段总结会议中@太丘(taiqiu) 指出在IPM层面应该抽象成为一样的模型来看待；中央库存的概念可以在现有库存模型中添加适配层来实现，集团内部库存中心lark文档集团库存中心架构图海信库存中心的库存类型分为：共享库存、独占库存、虚拟库存和在途库存天猫库存模式分为：普通前端模式(前端item库存、前端sku库存、门店库存、批次库存等)；分销虚仓模式(后端item库存)；区域限售模式(基于地址/经纬度等)；商家仓模式；门店自提模式菜鸟库存模型将库存分为基础网络库存、逻辑库存和物理库存，在已有概念里主要作为WMS存在，主要关注仓储业务。模型整体定义为GIS(global inventory service)全球库存服务，提供的接口如下：业务结构如下：奇门仓储支持的业务背景如下，处于承上启下的位置来对接ERP/OMS等、WMS物流宝3.0以物流服务为核心，主要包含服务路由、订单中心、发货、接入平台、订购、结算平台等业务单元，架构图如下：","categories":[],"tags":[]},{"title":"巨人计划项目备忘录.md","slug":"巨人计划项目备忘录","date":"2019-04-03T06:31:47.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/03/巨人计划项目备忘录/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/03/巨人计划项目备忘录/","excerpt":"","text":"项目关键词BRD 商业需求文档MRD 市场需求文档PRD 产品需求文档mockito配合Junit对restful接口进行测试首先在标记@before的init()方法中执行MockitoAnnotations.initMocks(this);开启@Mock注解利用Spring的ReflectionUtils工具类中的getField()、makeAvailable()和setField()注入mock的类之间的依赖关系通过when().thenReturn()方法为mock的注入类定制返回值通过when().thenCallRealMethod()方法执行要测试的restful接口方法通过when().thenThrow()方法模拟抛出异常的情况满足单元测试行覆盖率要求云效平台操作日志新建企业新建项目新建应用新建流水线订单履约平台概述从交易同步订单创建履约单正向订单履约和逆向订单履约根据订单履约事件或操作，更新履约单状态同步履约单状态给交易订单履约单查询、导出、报表页面交互等LazadaFBL模式TBDlist订单履约系统架构图表结构四月底前定到表接口设计四月底前忽略详细设计中四月底前覆盖重点模块和场景设计概要设计中用例图03.29会议纪要梳理混合配送、预约/预购寻源逻辑对供应链库存中退货部分进行领域图划分","categories":[],"tags":[]},{"title":":2019-:04-:03-:february","slug":"2019-04-03-february","date":"2019-04-03T06:25:47.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/03/2019-04-03-february/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/03/2019-04-03-february/","excerpt":"","text":"02.18​ 总结库存中心已有能力内容、迭代一添加内容(仓库容量和仓库经纬度、批次库存和临保库存)以及迭代二拟添加内容(寻源产品化、共享渠道库存和渠道预设库存)@太丘(taiqiu)纠正仓库容量应为仓库每天可以处理的订单量而不是物理仓库容量；纠正批次库存应是服务于临保库存的，在模型领域不应该包括颜色、正残等sku信息；纠正迭代一输出图示中的仓库领域覆盖范围设置和派送规则设置应合并为一个设置​ 讨论中 @太丘(taiqiu) 对Marathon迭代二寻源产品化实现要精简原理、迭代中不采用较为复杂的规则引擎，目前没有案例不要去做；在门店库存的概念上在做ipm时不应该单独提出来做，因为如果是wms则应区分门店和仓库，对于ipm则不透出门店库存与仓库库存的区别；库存适配平台不覆盖实物库存层，只提供适配层调用ERP也好、WMS也好甚至是门店和仓库，并且解决超卖问题和效率问题是关注点，快速适配各个平台不是主要关注点​ 在做库存中心时要先屡清楚基础概念，仓库管理、库存量和与之对接的wms和渠道要区分清楚，采购供应链不在库存中心覆盖范围之内，可以先把大模块全部定义出来，提供可扩展性尽量达到以不变应万变的层级02.20​ 会中团队人员各自分享了各自目前学习到的内容和困惑， @真青(mingxu.ymx)指出@苏菁(ym186904)@禾佳(yp195446)@徐秀洋(wb-xxy406417)在学习业务背景的同时要注重技术的熟练度，主要配合自动化测试工作等；​ @高维立(weili.gwl)@见至(nw181207)主要负责设计及框架建设。会中提出的做产品要能够以不变应万变，将新需求套入已有模型中实现；熟悉菜鸟、物流宝、奇门仓储的API与区别,试问自己为什么存在这些名词看似相似的产品，保证自己在阿里产品海洋中不会迷失，能够聚焦到与自己学习思路相关的部分，主要关注仓储和配送的部分。​ 会中确定从第九周开始Marathon第二次迭代，02.22召开会议确定迭代二内容。02.22​ Tips：CRUD操作中只有R是安全的，U是不幂等的​ 迭代二行动代号定为：sponge，迭代负责人为@于敏​ 1.会议确认下次迭代中要将项目已有和新建业务层代码行覆盖率都要提高达到80%，单元测试的意义不是为了单纯完成指标，而是为了在将来重构时提供依据，承担库存相关业务单测补全。​ 2.会议确认@于敏负责仓网络服务调研，@高维立负责渠道智能(基于海信)及奇门仓储服务调研，@倪炜负责菜鸟仓配服务调研，@殷鹏由于参与能力中心其他团队开发工作主要负责梳理库存占用、库存锁定和库存寻源逻辑输出文档工作​ 3.会议强调要看代码中多线程使用场景及原因，为库存重构准备，并且讨论了多线程进行库存占用等操作的好处及弊端，从中我学到了可以在提高并发量的基础上放弃一定的事务性，使用回补等补偿措施以提高QPS","categories":[{"name":"alicloud","slug":"alicloud","permalink":"https://masterx0.github.io/blog/categories/alicloud/"}],"tags":[{"name":"月度会议总结","slug":"月度会议总结","permalink":"https://masterx0.github.io/blog/tags/月度会议总结/"}]},{"title":":2019-:04-:03-:january","slug":"2019-04-03-january","date":"2019-04-03T06:16:42.000Z","updated":"2019-10-20T11:10:26.853Z","comments":true,"path":"2019/04/03/2019-04-03-january/","link":"","permalink":"https://masterx0.github.io/blog/2019/04/03/2019-04-03-january/","excerpt":"","text":"#1. whc模型增加地址、经纬度？yes仓库类型模型是否需要沉淀？ 01.08会议讨论配送方式、配送规则与仓库模型之间是否需要通用规则模型去覆盖？仓库容量？#2. ipm模型库存事件 mapping临保库存、批次库存方案库存事件状态机配置化#3. 渠道channel共享渠道库存 渠道预设库存 ？01.08会议讨论暂时不在迭代版本中cover#4. 主要讨论库存落地技术方案讨论迭代计划主要是库存和仓库两部分，渠道本次迭代暂不涉及仓库- 仓库模型：仓库类型要符合行业背景，目前仓库类型是从东购中提取出来的四部分（当日配、供应商配送、直配送、入库配送） - 仓库添加经度和纬度属性，在创建仓库时由请求参数赋值实现; ps寻源逻辑需要cover - 库存容量：根据sku的type/体积做sum~~,与库存计划相关~~ 库存 - 临保库存：指即将过期的商品库存，通过定义临保规则inventory_period_rule计算判断，隶属于批次库存 - 批次库存：主要存储批次号、生产日期、过期日期、保质期和~~供应商~~等，良残品率是否记录?定义批次扣减规则 - 渠道库存、共享库存方案未出 库存事件配置化 - 配置库存变化涉及的步骤（锁定、占用、扣减confirm和取消等），目前是写死在逻辑里的（例如：锁定-&gt;占用-&gt;扣减） Google做一个产品的顺序： 1. 写新闻稿 2. 写FAQ 3. 写用户文档 4. Coding #5.技术方案一审共享渠道库存实现逻辑讨论，现有版本没有cover这个功能，在实现中主要考虑预防超卖的问题，讨论出的方案是提供提供接口供调用者访问，在共享库存中的渠道商调用后扣减共享库存量，该能力保证共享渠道总库存量根据接口访问实时调整,经研究后目前接口已经提供但实现中未考虑相关业务场景迭代计划讨论，主要分为渠道、库存、仓库三个模块，项目预提测时间1.25，上线日期1.29。仓库部分功能点有经纬度改造、库容模型、对接地址中心(可能不在迭代计划内)库存部分功能点有批次库存、临保库存渠道部分功能点有共享渠道库存(可能不在迭代计划内)批次库存&amp;临保库存提供批次CRUD、批次库存CRUD、临保规则CRUD、临保库存CRUD临保库存是在批次库存的基础上通过定时任务或MQ等方式进行计算存储到DB所得的临保库存目前设计仅限于保质期场景，技术方案二审拟改为更加通用的方案仓库经纬度&amp;库容提供根据指定位置获取最近的仓库提供库容CRUD库存事件配置化待技术方案二审确定技术方案二审批次库存在dimension_json中扩展出库规则满足后续扩展需要临保库存暂时仍按一审会议安排仓库经纬度和库容均为改造现有仓库模型内容库存事件配置化确定开发工作内容分配个人工作内容如下：临保规则CRUD、临保规则计算、临保数据CRUD、临保数据展示","categories":[{"name":"alicloud","slug":"alicloud","permalink":"https://masterx0.github.io/blog/categories/alicloud/"}],"tags":[{"name":"月度会议总结","slug":"月度会议总结","permalink":"https://masterx0.github.io/blog/tags/月度会议总结/"}]}]}